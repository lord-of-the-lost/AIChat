//
//  ChatViewModel.swift
//  AIChat
//
//  Created by –ù–∏–∫–æ–ª–∞–π –ò–≥–Ω–∞—Ç–æ–≤ on 13.08.2025.
//

import Foundation

@MainActor
final class ChatViewModel: ObservableObject {
    @Published var messages: [ChatMessage] = []
    @Published var inputText = ""
    @Published var isLoading = false
    @Published var currentAgent: Agent = .gptDeveloper
    @Published var githubToken: String = UserDefaults.standard.string(forKey: "githubToken") ?? ""
    
    private let service: ChatService
    
    init(apiKey: String, githubToken: String = "") {
        self.service = ChatService(apiKey: apiKey, githubToken: githubToken)
        self.githubToken = githubToken
    }
    
    func sendUserMessage() {
        let trimmed = inputText.trimmingCharacters(in: .whitespacesAndNewlines)
        guard !trimmed.isEmpty else { return }
        
        let userMessage = ChatMessage(author: .user, content: trimmed, isUser: true)
        messages.append(userMessage)
        inputText = ""
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ MCP GitHub –∫–æ–º–∞–Ω–¥–æ–π
        if isMCPGitHubCommand(trimmed) {
            processMCPGitHubCommand(trimmed)
        } else {
            runPipeline()
        }
    }
    
    private func isMCPGitHubCommand(_ text: String) -> Bool {
        let lowercased = text.lowercased()
        return lowercased.contains("—Å–æ–∑–¥–∞–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π") || 
               lowercased.contains("create repository") ||
               lowercased.contains("–Ω–∞–π–¥–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏") ||
               lowercased.contains("search repositories") ||
               lowercased.contains("github") ||
               lowercased.contains("–≥–∏—Ç—Ö–∞–±") ||
               lowercased.contains("—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
    }
    
    private func processMCPGitHubCommand(_ command: String) {
        print("üîß ChatViewModel: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º MCP GitHub –∫–æ–º–∞–Ω–¥—É: \(command)")
        
        Task {
            isLoading = true
            currentAgent = .mcpGitHubAgent
            
            print("üîß ChatViewModel: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Å–µ—Ä–≤–∏—Å...")
            let result = await service.processMCPGitHubCommand(command)
            print("üîß ChatViewModel: –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: \(result)")
            
            messages.append(ChatMessage(author: .mcpGitHubAgent, content: result, isUser: false))
            
            isLoading = false
        }
    }
    
    private func runPipeline() {
        Task {
            isLoading = true
            currentAgent = .gptDeveloper
            
            // 1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
            guard let devReplyRaw = await service.sendToDeveloper(messages) else {
                isLoading = false
                return
            }
            
            let cleanDevReply = stripTags(devReplyRaw)
            messages.append(ChatMessage(author: .gptDeveloper, content: cleanDevReply, isUser: false))
            
            // 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¢–ó
            if isDeveloperSpecReady(devReplyRaw) {
                currentAgent = .gptReviewer
                
                guard let reviewReplyRaw = await service.sendToReviewer(messages) else {
                    isLoading = false
                    return
                }
                
                let cleanReviewReply = stripTags(reviewReplyRaw)
                messages.append(ChatMessage(author: .gptReviewer, content: cleanReviewReply, isUser: false))
            }
            
            isLoading = false
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¢–ó
    private func isDeveloperSpecReady(_ text: String) -> Bool {
        text.contains("<STATE: SPEC_READY>") &&
        text.contains("<TECH_SPEC>") &&
        text.contains("</TECH_SPEC>")
    }
    
    /// –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ `<...>`
    private func stripTags(_ text: String) -> String {
        let pattern = "<[^>]+>"
        guard let regex = try? NSRegularExpression(pattern: pattern) else { return text }
        let range = NSRange(text.startIndex..., in: text)
        return regex.stringByReplacingMatches(in: text, range: range, withTemplate: "")
    }
}
