//
//  MCPGitHubAgent.swift
//  AIChat
//
//  Created by –ù–∏–∫–æ–ª–∞–π –ò–≥–Ω–∞—Ç–æ–≤ on 13.08.2025.
//

import Foundation

final class MCPGitHubAgent: AIService {
    private let apiKey: String
    private let baseURL: String
    private let mcpService: MCPGitHubService
    
    init(baseURL: String, apiKey: String, githubToken: String) {
        self.baseURL = baseURL
        self.apiKey = apiKey
        self.mcpService = MCPGitHubService(githubToken: githubToken)
    }
    
    func sendMessage(messages: [ChatMessage]) async -> String? {
        guard let url = URL(string: baseURL + "chat/completions") else { return nil }
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        let tools = [
            [
                "type": "function",
                "function": [
                    "name": "create_repository",
                    "description": "–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤.",
                    "parameters": [
                        "type": "object",
                        "properties": [
                            "name": [
                                "type": "string",
                                "description": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                            ],
                            "description": [
                                "type": "string",
                                "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –º–æ–∂–µ—Ç –±—ã—Ç—å null)"
                            ],
                            "isPrivate": [
                                "type": "boolean",
                                "description": "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false - –ø—É–±–ª–∏—á–Ω—ã–π)"
                            ]
                        ],
                        "required": ["name"]
                    ]
                ]
            ],
            [
                "type": "function",
                "function": [
                    "name": "get_user_info",
                    "description": "–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ GitHub",
                    "parameters": [
                        "type": "object",
                        "properties": [:],
                        "required": []
                    ]
                ]
            ],
            [
                "type": "function",
                "function": [
                    "name": "search_repositories",
                    "description": "–ü–æ–∏—Å–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –Ω–∞ GitHub",
                    "parameters": [
                        "type": "object",
                        "properties": [
                            "query": [
                                "type": "string",
                                "description": "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
                            ],
                            "page": [
                                "type": "integer",
                                "description": "–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
                            ],
                            "perPage": [
                                "type": "integer",
                                "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
                            ]
                        ],
                        "required": ["query"]
                    ]
                ]
            ]
        ]
        
        let systemPrompt = """
        ROLE: MCP GitHub Agent
        PURPOSE: Process GitHub commands using MCP (Model Context Protocol) tools.

        AVAILABLE MCP TOOLS:
        - create_repository: –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        - get_user_info: –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ GitHub
        - search_repositories: –ü–æ–∏—Å–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –Ω–∞ GitHub

        RULES:
        - –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
        - –ù–ï –æ—Ç–≤–µ—á–∞–π —Ç–µ–∫—Å—Ç–æ–º, –µ—Å–ª–∏ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        - –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π create_repository
        - –ò–∑–≤–ª–µ–∫–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π null
        - –ï—Å–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π false (–ø—É–±–ª–∏—á–Ω—ã–π)
        - –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        - –í—ã–ø–æ–ª–Ω—è–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –Ω–µ –∑–∞–¥–∞–≤–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        """
        
        let allMessages: [[String: Any]] =
        [["role": "system", "content": systemPrompt]] +
        messages.map { ["role": $0.isUser ? "user" : "assistant", "content": $0.content] }
        
        var payload: [String: Any] = [
            "model": "gpt-3.5-turbo",
            "messages": allMessages,
            "tools": tools,
            "tool_choice": "required"
        ]
        
        request.httpBody = try? JSONSerialization.data(withJSONObject: payload)
        return await performRequest(request: request)
    }
    
    private func performRequest(request: URLRequest) async -> String? {
        do {
            let (data, response) = try await URLSession.shared.data(for: request)
            guard let http = response as? HTTPURLResponse, http.statusCode == 200 else { return nil }
            
            if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
               let choices = json["choices"] as? [[String: Any]],
               let message = choices.first?["message"] as? [String: Any] {
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ tool_calls (MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)
                if let toolCalls = message["tool_calls"] as? [[String: Any]] {
                    var results: [String] = []
                    
                    for toolCall in toolCalls {
                        if let function = toolCall["function"] as? [String: Any],
                           let name = function["name"] as? String,
                           let argumentsString = function["arguments"] as? String,
                           let argumentsData = argumentsString.data(using: .utf8),
                           let arguments = try? JSONSerialization.jsonObject(with: argumentsData) as? [String: Any] {
                            
                            print("üîß MCP Agent: –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '\(name)' —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: \(arguments)")
                            
                            // –í—ã–ø–æ–ª–Ω—è–µ–º MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                            let mcpResult = await mcpService.executeTool(name: name, arguments: arguments)
                            
                            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ MCP —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                            if let content = mcpResult.content.first?.text {
                                print("üîß MCP Agent: –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: \(content)")
                                results.append(content)
                            }
                        }
                    }
                    
                    return results.joined(separator: "\n\n")
                } else if let content = message["content"] as? String {
                    print("‚ö†Ô∏è AI –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –ø–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É—é")
                    return await parseAndExecuteCommand(content)
                }
            }
        } catch {
            print("‚ùå MCP GitHub Agent Error:", error)
        }
        return nil
    }
    
    private func parseAndExecuteCommand(_ command: String) async -> String {
        print("üîß –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: \(command)")
        
        let lowercased = command.lowercased()
        
        // –ü–∞—Ä—Å–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        if lowercased.contains("—Å–æ–∑–¥–∞–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π") || lowercased.contains("create repository") {
            let words = command.components(separatedBy: .whitespaces)
            var repoName = ""
            var description: String? = nil
            var isPrivate = false
            
            // –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ "—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" –∏–ª–∏ "repository"
            if let repoIndex = words.firstIndex(where: { $0.lowercased() == "—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" || $0.lowercased() == "repository" }) {
                if repoIndex + 1 < words.count {
                    repoName = words[repoIndex + 1]
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å
            if lowercased.contains("–ø—Ä–∏–≤–∞—Ç–Ω—ã–π") || lowercased.contains("private") {
                isPrivate = true
            }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–≤—Å–µ —á—Ç–æ –ø–æ—Å–ª–µ "—Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º" –∏–ª–∏ "with name")
            if let nameIndex = command.range(of: "—Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º") ?? command.range(of: "with name") {
                let afterName = String(command[nameIndex.upperBound...])
                if let descStart = afterName.firstIndex(where: { $0 != " " }) {
                    description = String(afterName[descStart...])
                }
            }
            
            // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
            if repoName.isEmpty {
                let cleanCommand = command.replacingOccurrences(of: "—Å–æ–∑–¥–∞–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π", with: "")
                    .replacingOccurrences(of: "create repository", with: "")
                    .trimmingCharacters(in: .whitespaces)
                repoName = cleanCommand.components(separatedBy: .whitespaces).first ?? "new-repo"
            }
            
            print("üîß –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–∑–≤–∞–Ω–∏–µ=\(repoName), –æ–ø–∏—Å–∞–Ω–∏–µ=\(description ?? "nil"), –ø—Ä–∏–≤–∞—Ç–Ω—ã–π=\(isPrivate)")
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            let mcpResult = await mcpService.executeTool(name: "create_repository", arguments: [
                "name": repoName,
                "description": description as Any,
                "isPrivate": isPrivate
            ])
            
            return mcpResult.content.first?.text ?? "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
        }
        
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É: \(command)"
    }
}
