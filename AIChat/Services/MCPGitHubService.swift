//
//  MCPGitHubService.swift
//  AIChat
//
//  Created by –ù–∏–∫–æ–ª–∞–π –ò–≥–Ω–∞—Ç–æ–≤ on 13.08.2025.
//

import Foundation

// MARK: - MCP Protocol Structures

struct MCPResult: Codable {
    let content: [MCPContent]
}

struct MCPContent: Codable {
    let type: String
    let text: String?
    let toolCalls: [MCPToolCall]?
}

struct MCPToolCall: Codable {
    let name: String
    let arguments: [String: String]
}

// MARK: - GitHub MCP Client

final class MCPGitHubService {
    private let githubToken: String
    private let baseURL = "https://api.github.com"
    
    init(githubToken: String) {
        self.githubToken = githubToken
    }
    
    // MARK: - MCP Tool Implementations
    
    func createRepository(name: String, description: String?, isPrivate: Bool = false) async -> Result<GitHubResponse, Error> {
        guard let url = URL(string: "\(baseURL)/user/repos") else {
            return .failure(GitHubMCPError.invalidURL)
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("Bearer \(githubToken)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("application/vnd.github.v3+json", forHTTPHeaderField: "Accept")
        
        let repository = GitHubRepository(
            name: name,
            description: description,
            isPrivate: isPrivate,
            autoInit: true
        )
        
        do {
            let jsonData = try JSONEncoder().encode(repository)
            request.httpBody = jsonData
            
            print("üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:")
            print("URL: \(url)")
            print("–ù–∞–∑–≤–∞–Ω–∏–µ: \(name)")
            print("–û–ø–∏—Å–∞–Ω–∏–µ: \(description ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ")")
            print("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π: \(isPrivate)")
            
            let (data, response) = try await URLSession.shared.data(for: request)
            
            guard let httpResponse = response as? HTTPURLResponse else {
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π HTTP –æ—Ç–≤–µ—Ç")
                return .failure(GitHubMCPError.invalidResponse)
            }
            
            print("üì° HTTP —Å—Ç–∞—Ç—É—Å: \(httpResponse.statusCode)")
            
            if let responseString = String(data: data, encoding: .utf8) {
                print("üìÑ –û—Ç–≤–µ—Ç –æ—Ç GitHub: \(responseString)")
            }
            
            if httpResponse.statusCode == 201 {
                let repository = try JSONDecoder().decode(GitHubResponse.self, from: data)
                print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: \(repository.name)")
                return .success(repository)
            } else {
                if let errorData = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let message = errorData["message"] as? String {
                    print("‚ùå GitHub API –æ—à–∏–±–∫–∞: \(message)")
                    return .failure(GitHubMCPError.apiError(message))
                } else {
                    print("‚ùå HTTP –æ—à–∏–±–∫–∞: \(httpResponse.statusCode)")
                    return .failure(GitHubMCPError.httpError(httpResponse.statusCode))
                }
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: \(error)")
            return .failure(error)
        }
    }
    
    func getUserInfo() async -> Result<GitHubUser, Error> {
        guard let url = URL(string: "\(baseURL)/user") else {
            return .failure(GitHubMCPError.invalidURL)
        }
        
        var request = URLRequest(url: url)
        request.setValue("Bearer \(githubToken)", forHTTPHeaderField: "Authorization")
        request.setValue("application/vnd.github.v3+json", forHTTPHeaderField: "Accept")
        
        do {
            let (data, response) = try await URLSession.shared.data(for: request)
            
            guard let httpResponse = response as? HTTPURLResponse else {
                return .failure(GitHubMCPError.invalidResponse)
            }
            
            if httpResponse.statusCode == 200 {
                let user = try JSONDecoder().decode(GitHubUser.self, from: data)
                return .success(user)
            } else {
                return .failure(GitHubMCPError.httpError(httpResponse.statusCode))
            }
        } catch {
            return .failure(error)
        }
    }
    
    func searchRepositories(query: String, page: Int = 1, perPage: Int = 30) async -> Result<GitHubSearchResponse, Error> {
        var components = URLComponents(string: "\(baseURL)/search/repositories")!
        components.queryItems = [
            URLQueryItem(name: "q", value: query),
            URLQueryItem(name: "page", value: "\(page)"),
            URLQueryItem(name: "per_page", value: "\(perPage)")
        ]
        
        guard let url = components.url else {
            return .failure(GitHubMCPError.invalidURL)
        }
        
        var request = URLRequest(url: url)
        request.setValue("Bearer \(githubToken)", forHTTPHeaderField: "Authorization")
        request.setValue("application/vnd.github.v3+json", forHTTPHeaderField: "Accept")
        
        do {
            let (data, response) = try await URLSession.shared.data(for: request)
            
            guard let httpResponse = response as? HTTPURLResponse else {
                return .failure(GitHubMCPError.invalidResponse)
            }
            
            if httpResponse.statusCode == 200 {
                let searchResponse = try JSONDecoder().decode(GitHubSearchResponse.self, from: data)
                return .success(searchResponse)
            } else {
                if let errorData = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let message = errorData["message"] as? String {
                    return .failure(GitHubMCPError.apiError(message))
                } else {
                    return .failure(GitHubMCPError.httpError(httpResponse.statusCode))
                }
            }
        } catch {
            return .failure(error)
        }
    }
    
    // MARK: - MCP Tool Execution
    
    func executeTool(name: String, arguments: [String: Any]) async -> MCPResult {
        print("üîß MCP Service: –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '\(name)' —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: \(arguments)")
        
        switch name {
        case "create_repository":
            print("üîß MCP Service: –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...")
            return await handleCreateRepository(arguments)
        case "get_user_info":
            print("üîß MCP Service: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
            return await handleGetUserInfo()
        case "search_repositories":
            print("üîß MCP Service: –ò—â–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏...")
            return await handleSearchRepositories(arguments)
        default:
            print("‚ùå MCP Service: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: \(name)")
            return MCPResult(content: [
                MCPContent(
                    type: "text",
                    text: "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: \(name)",
                    toolCalls: nil
                )
            ])
        }
    }
    
    private func handleCreateRepository(_ arguments: [String: Any]) async -> MCPResult {
        print("üîß handleCreateRepository: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: \(arguments)")
        
        guard let name = arguments["name"] as? String else {
            print("‚ùå handleCreateRepository: –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
            return MCPResult(content: [
                MCPContent(
                    type: "text",
                    text: "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è",
                    toolCalls: nil
                )
            ])
        }
        
        let description = arguments["description"] as? String
        let isPrivate = arguments["isPrivate"] as? Bool ?? false
        
        print("üîß handleCreateRepository: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:")
        print("  - –ù–∞–∑–≤–∞–Ω–∏–µ: \(name)")
        print("  - –û–ø–∏—Å–∞–Ω–∏–µ: \(description ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ")")
        print("  - –ü—Ä–∏–≤–∞—Ç–Ω—ã–π: \(isPrivate)")
        
        let result = await createRepository(
            name: name,
            description: description,
            isPrivate: isPrivate
        )
        
        switch result {
        case .success(let repository):
            return MCPResult(content: [
                MCPContent(
                    type: "text",
                    text: """
                    ‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!
                    
                    üìÅ –ù–∞–∑–≤–∞–Ω–∏–µ: \(repository.name)
                    üîó URL: \(repository.htmlUrl)
                    üìã –û–ø–∏—Å–∞–Ω–∏–µ: \(repository.description ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                    üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π: \(repository.isPrivate ? "–î–∞" : "–ù–µ—Ç")
                    üìÖ –°–æ–∑–¥–∞–Ω: \(repository.createdAt)
                    
                    –î–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
                    git clone \(repository.cloneUrl)
                    """,
                    toolCalls: nil
                )
            ])
            
        case .failure(let error):
            return MCPResult(content: [
                MCPContent(
                    type: "text",
                    text: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: \(error.localizedDescription)",
                    toolCalls: nil
                )
            ])
        }
    }
    
    private func handleGetUserInfo() async -> MCPResult {
        let result = await getUserInfo()
        
        switch result {
        case .success(let user):
            return MCPResult(content: [
                MCPContent(
                    type: "text",
                    text: """
                    üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ GitHub:
                    
                    üè∑Ô∏è –õ–æ–≥–∏–Ω: \(user.login)
                    üìù –ò–º—è: \(user.name ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                    üìß Email: \(user.email ?? "–ù–µ —É–∫–∞–∑–∞–Ω")
                    üÜî ID: \(user.id)
                    """,
                    toolCalls: nil
                )
            ])
            
        case .failure(let error):
            return MCPResult(content: [
                MCPContent(
                    type: "text",
                    text: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: \(error.localizedDescription)",
                    toolCalls: nil
                )
            ])
        }
    }
    
    private func handleSearchRepositories(_ arguments: [String: Any]) async -> MCPResult {
        guard let query = arguments["query"] as? String else {
            return MCPResult(content: [
                MCPContent(
                    type: "text",
                    text: "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
                    toolCalls: nil
                )
            ])
        }
        
        let page = arguments["page"] as? Int ?? 1
        let perPage = arguments["perPage"] as? Int ?? 10
        
        let result = await searchRepositories(
            query: query,
            page: page,
            perPage: perPage
        )
        
        switch result {
        case .success(let searchResponse):
            let repositories = searchResponse.items.prefix(5) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            let repoList = repositories.map { repo in
                """
                üìÅ \(repo.name)
                üîó \(repo.htmlUrl)
                üìã \(repo.description ?? "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
                """
            }.joined(separator: "\n\n")
            
            return MCPResult(content: [
                MCPContent(
                    type: "text",
                    text: """
                    üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è "\(query)":
                    
                    –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: \(searchResponse.totalCount)
                    
                    \(repoList)
                    """,
                    toolCalls: nil
                )
            ])
            
        case .failure(let error):
            return MCPResult(content: [
                MCPContent(
                    type: "text",
                    text: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: \(error.localizedDescription)",
                    toolCalls: nil
                )
            ])
        }
    }
}

// MARK: - Data Models

struct GitHubRepository: Codable {
    let name: String
    let description: String?
    let isPrivate: Bool
    let autoInit: Bool
    
    enum CodingKeys: String, CodingKey {
        case name, description
        case isPrivate = "private"
        case autoInit = "auto_init"
    }
}

struct GitHubResponse: Codable {
    let id: Int
    let name: String
    let fullName: String
    let description: String?
    let htmlUrl: String
    let cloneUrl: String
    let isPrivate: Bool
    let createdAt: String
    
    enum CodingKeys: String, CodingKey {
        case id, name, description
        case isPrivate = "private"
        case fullName = "full_name"
        case htmlUrl = "html_url"
        case cloneUrl = "clone_url"
        case createdAt = "created_at"
    }
}

struct GitHubUser: Codable {
    let login: String
    let id: Int
    let name: String?
    let email: String?
    let avatarUrl: String
    
    enum CodingKeys: String, CodingKey {
        case login, id, name, email
        case avatarUrl = "avatar_url"
    }
}

struct GitHubSearchResponse: Codable {
    let totalCount: Int
    let items: [GitHubResponse]
    
    enum CodingKeys: String, CodingKey {
        case totalCount = "total_count"
        case items
    }
}

enum GitHubMCPError: LocalizedError {
    case invalidURL
    case invalidResponse
    case httpError(Int)
    case apiError(String)
    
    var errorDescription: String? {
        switch self {
        case .invalidURL:
            return "–ù–µ–≤–µ—Ä–Ω—ã–π URL"
        case .invalidResponse:
            return "–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
        case .httpError(let code):
            return "HTTP –æ—à–∏–±–∫–∞: \(code)"
        case .apiError(let message):
            return "GitHub API –æ—à–∏–±–∫–∞: \(message)"
        }
    }
}
